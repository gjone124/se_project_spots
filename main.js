!function(){"use strict";const e=(e,t,r)=>{const n=t.id+"-error";e.querySelector("#"+n).textContent="",t.classList.remove(r.inputErrorClass)},t=(e,t,n)=>{(e=>e.some((e=>!e.validity.valid)))(e)?r(t,n):(t.disabled=!1,t.classList.remove(n.inactiveButtonClass))},r=(e,t)=>{e.disabled=!0,e.classList.add(t.inactiveButtonClass)},n={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error"};function o(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Save",n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"Saving...";e.textContent=t?n:r}const a=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}addCard(e){let{name:t,link:r}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}changeLikeStatus(e,t){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers}).then(this._checkResponse)}editUserInfo(e){let{name:t,about:r}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})}).then(this._checkResponse)}editUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"506cab27-cb57-4614-a4cb-84697f37c55f","Content-Type":"application/json"}}),s=document.querySelector(".profile__avatar-button"),c=document.querySelector(".profile__avatar-image"),i=document.querySelector(".profile__edit-button"),l=document.querySelector(".profile__add-button"),d=document.querySelector(".profile__name"),u=document.querySelector(".profile__description"),m=document.querySelectorAll(".modal"),_=document.querySelector("#avatar-modal"),h=_.querySelector(".modal__form"),f=(_.querySelector(".modal__submit-button"),_.querySelector("#profile-avatar-input")),v=document.querySelector("#edit-modal"),p=v.querySelector(".modal__form"),y=v.querySelector("#profile-name-input"),b=v.querySelector("#profile-description-input"),S=document.querySelector("#add-card-modal"),k=S.querySelector(".modal__form"),q=S.querySelector(".modal__submit-button"),E=(S.querySelector("#add-card-caption-input"),S.querySelector("#add-card-link-input"),document.querySelector("#delete-card-modal")),L=E.querySelector(".modal__form"),g=document.querySelector(".modal__submit-button_cancel"),C=document.querySelector("#preview-modal"),U=C.querySelector(".modal__caption"),A=C.querySelector(".modal__image"),x=document.querySelector("#card-template"),D=document.querySelector(".cards__list");let $,I;function R(e){e.classList.add("modal_is-opened"),document.addEventListener("keydown",P)}function T(e){e.classList.remove("modal_is-opened"),document.removeEventListener("keydown",P)}function P(e){if("Escape"===e.key){const e=document.querySelector(".modal_is-opened");e&&T(e)}}function B(e){const t=x.content.querySelector(".card").cloneNode(!0),r=t.querySelector(".card__text"),n=t.querySelector(".card__image");r.textContent=e.name,n.src=e.link,n.alt=e.name;const o=t.querySelector(".card__like-button"),s=t.querySelector(".card__delete-button");return e.isLiked&&o.classList.add("card__like-button_liked"),o.addEventListener("click",(t=>function(e,t){const r=e.target.classList.contains("card__like-button_liked");a.changeLikeStatus(t,r).then((()=>{e.target.classList.toggle("card__like-button_liked")})).catch((e=>{console.error(e)}))}(t,e._id))),s.addEventListener("click",(()=>{!function(e,t){$=e,I=t,R(E)}(t,e._id)})),n.addEventListener("click",(()=>{!function(e){const{_id:t,link:r,name:n,isLiked:o}=e;A.setAttribute("src",r),A.setAttribute("alt",n+" image"),U.textContent=n,R(C)}(e)})),t}var w;s.addEventListener("click",(()=>{R(_)})),h.addEventListener("submit",(function(e){e.preventDefault();const t=e.submitter;o(t,!0),a.editUserAvatar(f.value).then((e=>{c.src=e.avatar,T(_)})).catch(console.error).finally((()=>o(t,!1)))})),i.addEventListener("click",(()=>{var t,r;y.value=d.textContent.trim(),b.value=u.textContent.trim(),t=v,r=n,[y,b].forEach((n=>{e(t,n,r)})),R(v)})),p.addEventListener("submit",(function(e){e.preventDefault();const t=e.submitter;o(t,!0),a.editUserInfo({name:y.value,about:b.value}).then((e=>{d.textContent=e.name,u.textContent=e.about,T(v)})).catch(console.error).finally((()=>o(t,!1)))})),l.addEventListener("click",(()=>{R(S)})),k.addEventListener("submit",(function(e){e.preventDefault();const t=e.submitter,{name:s,link:c}=e.target.elements;o(t,!0),a.addCard({name:s.value,link:c.value}).then((t=>{const o=B(t);D.prepend(o),T(S),e.target.reset(),r(q,n)})).catch((e=>console.error(e))).finally((()=>o(t,!1)))})),L.addEventListener("submit",(function(e){e.preventDefault();const t=e.submitter;o(t,!0,"Delete","Deleting..."),a.deleteCard(I).then((()=>{T(E),$.remove()})).catch(console.error).finally((()=>o(t,!1,"Delete","Deleting...")))})),g.addEventListener("click",(()=>T(E))),w=n,Array.from(document.querySelectorAll(w.formSelector)).forEach((n=>{((n,o)=>{const a=Array.from(n.querySelectorAll(o.inputSelector)),s=n.querySelector(o.submitButtonSelector);t(a,s,o),n.addEventListener("reset",(()=>{r(s,o)})),a.forEach((r=>{r.addEventListener("input",(function(){((t,r,n)=>{r.validity.valid?e(t,r,n):((e,t,r,n)=>{const o=t.id+"-error";e.querySelector("#"+o).textContent=r,t.classList.add(n.inputErrorClass)})(t,r,r.validationMessage,n)})(n,r,o),t(a,s,o)}))}))})(n,w)})),document.querySelectorAll(".modal__close-button").forEach((e=>{const t=e.closest(".modal");e.addEventListener("click",(()=>T(t)))})),m.forEach((e=>{e.addEventListener("click",(t=>{t.target===e&&T(e)}))})),a.getAppInfo().then((e=>{let[t,r]=e;t.forEach((e=>{const t=B(e);D.append(t)})),d.textContent=r.name,u.textContent=r.about,c.src=r.avatar})).catch(console.error)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,